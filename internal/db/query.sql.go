// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCnae = `-- name: CreateCnae :exec

INSERT INTO cnaes (codigo, descricao)
VALUES (?, ?)
ON CONFLICT (codigo) DO UPDATE SET descricao = EXCLUDED.descricao
`

type CreateCnaeParams struct {
	Codigo    string
	Descricao string
}

// -------------- Cnae ----------------
func (q *Queries) CreateCnae(ctx context.Context, arg CreateCnaeParams) error {
	_, err := q.db.ExecContext(ctx, createCnae, arg.Codigo, arg.Descricao)
	return err
}

const createEmpresa = `-- name: CreateEmpresa :exec

INSERT INTO empresas (cnpj_basico, razao_social, natureza_juridica, capital_social, porte_empresa)
VALUES (?, ?, ?, ?, ?)
ON CONFLICT (cnpj_basico) DO UPDATE 
SET 
    razao_social = EXCLUDED.razao_social,
    natureza_juridica = EXCLUDED.natureza_juridica,
    capital_social = EXCLUDED.capital_social,
    porte_empresa = EXCLUDED.porte_empresa
`

type CreateEmpresaParams struct {
	CnpjBasico       string
	RazaoSocial      string
	NaturezaJuridica string
	CapitalSocial    int64
	PorteEmpresa     string
}

// -------------- Empresa ----------------
func (q *Queries) CreateEmpresa(ctx context.Context, arg CreateEmpresaParams) error {
	_, err := q.db.ExecContext(ctx, createEmpresa,
		arg.CnpjBasico,
		arg.RazaoSocial,
		arg.NaturezaJuridica,
		arg.CapitalSocial,
		arg.PorteEmpresa,
	)
	return err
}

const createEstabelecimento = `-- name: CreateEstabelecimento :exec

INSERT INTO estabelecimentos (
    cnpj_basico, cnpj_ordem, cnpj_dv, identificador_matriz_filial, 
    nome_fantasia, data_abertura, cnae, logradouro, 
    numero, complemento, bairro, cep,
    uf, municipio, ddd, telefone, email
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
ON CONFLICT (cnpj_basico, cnpj_ordem, cnpj_dv) DO UPDATE 
SET 
    nome_fantasia = EXCLUDED.nome_fantasia,
    data_abertura = EXCLUDED.data_abertura,
    cnae = EXCLUDED.cnae,
    logradouro = EXCLUDED.logradouro,
    numero = EXCLUDED.numero,
    complemento = EXCLUDED.complemento,
    bairro = EXCLUDED.bairro,
    cep = EXCLUDED.cep,
    uf = EXCLUDED.uf,
    municipio = EXCLUDED.municipio,
    ddd = EXCLUDED.ddd,
    telefone = EXCLUDED.telefone,
    email = EXCLUDED.email
`

type CreateEstabelecimentoParams struct {
	CnpjBasico                string
	CnpjOrdem                 string
	CnpjDv                    string
	IdentificadorMatrizFilial int64
	NomeFantasia              sql.NullString
	DataAbertura              time.Time
	Cnae                      string
	Logradouro                string
	Numero                    string
	Complemento               sql.NullString
	Bairro                    string
	Cep                       string
	Uf                        string
	Municipio                 string
	Ddd                       sql.NullString
	Telefone                  sql.NullString
	Email                     sql.NullString
}

// -------------- Estabelecimento ----------------
func (q *Queries) CreateEstabelecimento(ctx context.Context, arg CreateEstabelecimentoParams) error {
	_, err := q.db.ExecContext(ctx, createEstabelecimento,
		arg.CnpjBasico,
		arg.CnpjOrdem,
		arg.CnpjDv,
		arg.IdentificadorMatrizFilial,
		arg.NomeFantasia,
		arg.DataAbertura,
		arg.Cnae,
		arg.Logradouro,
		arg.Numero,
		arg.Complemento,
		arg.Bairro,
		arg.Cep,
		arg.Uf,
		arg.Municipio,
		arg.Ddd,
		arg.Telefone,
		arg.Email,
	)
	return err
}

const createMunicipio = `-- name: CreateMunicipio :exec

INSERT INTO municipios (codigo, descricao)
VALUES (?, ?)
ON CONFLICT (codigo) DO UPDATE SET descricao = EXCLUDED.descricao
`

type CreateMunicipioParams struct {
	Codigo    string
	Descricao string
}

// -------------- Municipio ----------------
func (q *Queries) CreateMunicipio(ctx context.Context, arg CreateMunicipioParams) error {
	_, err := q.db.ExecContext(ctx, createMunicipio, arg.Codigo, arg.Descricao)
	return err
}

const createNaturezaJuridica = `-- name: CreateNaturezaJuridica :exec

INSERT INTO naturezas_juridicas (descricao, codigo)
VALUES (?, ?)
ON CONFLICT (codigo) DO UPDATE SET descricao = EXCLUDED.descricao
`

type CreateNaturezaJuridicaParams struct {
	Descricao string
	Codigo    string
}

// -------------- Natureza Juridica ----------------
func (q *Queries) CreateNaturezaJuridica(ctx context.Context, arg CreateNaturezaJuridicaParams) error {
	_, err := q.db.ExecContext(ctx, createNaturezaJuridica, arg.Descricao, arg.Codigo)
	return err
}
